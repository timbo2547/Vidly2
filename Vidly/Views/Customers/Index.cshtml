@model IEnumerable<Vidly.Models.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*Customers Index
    /customers/
*@




<h2>Customers</h2>

@Html.ActionLink("New Customer", "New", "Customers", new { }, new { @class = "btn btn-info" })

<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Discount Rate</th>
            <th>Delete</th>
        </tr>
    </thead>

    @*<tbody>
            @foreach (var customer in Model)
                {
                    <tr>
                        <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, new { })</td>
                        <td>@customer.MembershipType.MembershipTypeName</td>
                        <td><button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button></td>
                    </tr>
                }
        </tbody>*@
</table>



@*@if (!Model.Any())
    {
        <p>There are no Customers :(</p>

    }
    else
    {

    }*@

@section scripts
{
    <script>
        //JQuery Script
        $(document).ready(function () {
            var table = $("#customers").DataTable({
                ajax: {
                    //This returns the entire list of customers. Will need to break this up server side if records count grows too large
                    url: "/api/customers",
                    dataSrc: ""
                },
                columns: [
                    //All 'data' items must be in camelCase
                    {
                        data: "name",
                        //rendering each row in the table
                        render: function (data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    {
                        data: "membershipType.membershipTypeName"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button data-customer-id=" + data + " class='btn-link js-delete'>Delete</button>"
                        }
                    }
                ]
            });

            $("#customers").on("click", ".js-delete", function () {
                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();
                            }
                        })
                    }
                })
            })
        })
    </script>
}


